<?php
/**
 * @file
 * Code for the Imagex Contest feature.
 */

include_once 'imagex_contest.features.inc';

/**
 * Implements hook_menu().
 */
function imagex_contest_menu() {
  $items['contest/select-entry/%node/%node/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagex_contest_contest_admin_form', 2, 3, 4),
    'access callback' => 'imagex_contest_contest_admin_access',
    'access arguments' => array(2, 3, 4),
  );
  
  return $items;
}

/**
 * Implements hook_node_view().
 */
function imagex_contest_node_view($node, $view_mode, $langcode) {
  //For users to enter contest if allowed
  if ($node->type == 'contest' && $links = imagex_contest_contest_entry_links($node)) {    
    $node->content['links']['imagex_contest_add_entry'] = array(
      '#theme' => 'links__imagex_contest_add_entry',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
  
  // For admins of contests to quickly select finalists & winners
  if ($node->type == 'contest_entry' && $links = imagex_contest_contest_admin_links($node)) {
    $node->content['links']['imagex_contest_contest_admin_links'] = array(
      '#theme' => 'links__imagex_contest_add_entry',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements of hook_form_FORM_ID_alter()
 */
function imagex_contest_form_contest_entry_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];
  
  // Attach contest rules/terms checkbox on new entries
  if (empty($node->nid)) {
    $contest_rules = '';
    if ($_GET['field_contest_entry_contest']) {
      if ($contest = node_load($_GET['field_contest_entry_contest'])) {
        $contest_wrapper = entity_metadata_wrapper('node', $contest);
        $contest_rules = $contest_wrapper->field_contest_rules->value(array('sanitize' => TRUE));
      }
    }
    
    // Container for rules elements
    $form['imagex_contest_rules'] = array(
      '#type' => 'container',
      '#weight' => 99,
    );
    
    // Rules is required field so should be present
    if (!empty($contest_rules)) {      
      // Display rules as markup
      $form['imagex_contest_rules']['imagex_contest_rules_view'] = array(
        '#type' => 'item',
        '#title' => t("Contest Rules"),
        '#markup' => '<div class="imagex-contest-contest-rules">' . $contest_rules['safe_value'] . '</div>',
      );
    }
    
    // Show checkbox regardless
    $form['imagex_contest_rules']['imagex_contest_rules_agree'] = array(
      '#type' => 'checkbox',
      '#title' => t("I agree that my entry complies with the rules of this contest."),
      '#required' => TRUE,
    );    
    
    $form['actions']['#weight'] = 100;
  }
}

/**
 * Implements HOOK_form_alter()
 */
function imagex_contest_form_alter(&$form, &$form_state, $form_id) {
  // Temp fix for https://drupal.org/node/1750950
  // Boolean single checkboxes have no labels
  switch ($form_id) {
    case 'views_content_views_panes_content_type_edit_form':
      $checkboxes = array(
        'field_contest_entry_open_value',
        'field_contest_voting_open_value',
      );
      if (!empty($form['exposed'])) {
        foreach ($checkboxes as $checkbox) {
          if (!empty($form['exposed']['filter-' . $checkbox])) {
            $form['exposed']['filter-' . $checkbox][$checkbox]['#options'][0] = t('No');
            $form['exposed']['filter-' . $checkbox][$checkbox]['#options'][1] = t('Yes');
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter()
 *
 * @see: views_bulk_operations.api.php
 */
function imagex_contest_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // Hijack the "no mail" variable for the rules_imagex_contest_entry_as_winner & rules_imagex_contest_entry_as_finalist
  // rules and make it look better
  $view = $vbo->view;
  if ($view->name == 'imagex_contest_entries_admin' && $form_state['step'] == 'views_bulk_operations_config_form' && !empty($form['parameter']['notify_entry_author'])) {
    $form['parameter']['notify_entry_author']['settings']['notify_entry_author']['#title'] = t('Notify contest entry author?');
    $form['parameter']['notify_entry_author']['settings']['notify_entry_author']['#description'] = t('By default contest entry authors will be notified via email about their entry
                                                                             being selected as a winner or finalist in the contest. Select "no" to not notify them.');
    
    // rules requires the parameter so have to pass something hence yes & no not opt out
    $form['parameter']['notify_entry_author']['settings']['notify_entry_author']['#type'] = 'radios';
    $form['parameter']['notify_entry_author']['settings']['notify_entry_author']['#options'] = array(
      1 => t('Yes'),
      2 => t('No')
    );
    $form['parameter']['notify_entry_author']['settings']['notify_entry_author']['#default_value'] = 1;
  }
}

/**
 * Implements HOOK_preprocess_node()
 */
function imagex_contest_preprocess_node(&$vars) {
  $node = $vars['node'];
  
  // Add class to contest entries if finalist or winner
  if ($node->type == 'contest_entry') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if (!empty($node_wrapper->field_contest_entry_status)) {
      foreach ($node_wrapper->field_contest_entry_status->getIterator() as $delta => $value) {
        $vars['classes_array'][] = 'node-contest-entry-' . trim(strtolower($value->label()));
      }
    }
  }
}

/**
 * Determines if a contest is open to entries & global has access
 *
 * Returns links array based on access
 */
function imagex_contest_contest_entry_links($node) {
  global $user;
  $links = array();
  
  // User access
  if (!user_access('create contest_entry content')) {
    // Logged in but no access
    $submit_entry_title = t('You do not have sufficient permissions to submit an entry to this contest.');
    $submit_entry_class = array('imagex-contest-add-entry-noaccess');
    
    // Not logged in
    if (empty($user->uid)) {
      $submit_entry_title = t('<a href="@login">Log in</a> or <a href="@register">register</a> to submit an entry to this contest.', array('@login' => url('user/login', array('query' => drupal_get_destination())), '@register' => url('user/register', array('query' => drupal_get_destination()))));
      $submit_entry_class = array('imagex-contest-add-entry-anonymous');
    }
  
    // Give user feedback
    $links['imagex_contest_add_entry_noaccess'] = array(
      'title' => $submit_entry_title,
      'html' => TRUE,
      'attributes' => array(
        'title' => strip_tags($submit_entry_title),
        'class' => $submit_entry_class,
      ),
    );  
  }
  
  // Contest is no longer open to entries
  $node_wrapper = entity_metadata_wrapper('node', $node);  
  if (!empty($node_wrapper->field_contest_entry_open)) {
    $content_open_entry = $node_wrapper->field_contest_entry_open->value();
    if (empty($content_open_entry)) {
      $links['imagex_contest_add_entry_noaccess'] = array(
        'title' => t('This contest is no longer open to entries.'),
        'html' => TRUE,
        'attributes' => array(
          'title' => t('This contest is no longer open to entries'),
          'class' => array('imagex-contest-add-entry-closed'),
        ),
      );
    }
  }

  // Contest is no longer open for voting
  $node_wrapper = entity_metadata_wrapper('node', $node);  
  if (!empty($node_wrapper->field_contest_entry_open)) {
    $content_open_voting = $node_wrapper->field_contest_voting_open->value();
    if (empty($content_open_voting)) {
      $links['imagex_contest_add_vote_noaccess'] = array(
        'title' => t('This contest is no longer open to voting.'),
        'html' => TRUE,
        'attributes' => array(
          'title' => t('This contest is no longer open to voting.'),
          'class' => array('imagex-contest-add-vote-closed'),
        ),
      );
    }
  }
  
  // Default, contest open and ready
  if (empty($links)) {
    $links['imagex_contest_add_entry'] = array(
      'title' => t('Submit your entry now'),
      'href' => 'node/add/contest-entry',
      'query' => array('field_contest_entry_contest' => $node->nid) + drupal_get_destination(),
      'attributes' => array(
        'title' => t('Submit your entry into this contest now!'),
        'class' => array('imagex-contest-add-entry'),
      ),
    );
  }
  
  return $links;
}

/**
 * Provides contest admin links on entries ie. Select As Finalist
 *
 * Returns links array based on access
 */
function imagex_contest_contest_admin_links($node) {
  $links = array();

  // Get related contest data
  if (!empty($node->field_contest_entry_contest[LANGUAGE_NONE][0]['entity'])) {
    // Viewing contest entry comes will full entity loaded
    $contest_node = $node->field_contest_entry_contest[LANGUAGE_NONE][0]['entity'];
  }
  else {
    // Otherwise we just get the entity id
    $contest_node = entity_load('node', array($node->field_contest_entry_contest[LANGUAGE_NONE][0]['target_id']));
    if (!empty($contest_node)) {
      $contest_node = array_shift($contest_node);
    }
  }
  $contest_entry_node = $node;
  
  // Both contest & entry nodes are required
  if (empty($contest_node) || empty($contest_entry_node)) {
    return FALSE;
  }
  
  // User access
  if (!imagex_contest_contest_admin_access($contest_node, $contest_entry_node)) {
    return FALSE;
  }
  
  // Load Contest status, metadata_wrapper throws errors without property checking
  $contest_node_wrapper = entity_metadata_wrapper('node', $contest_node);
  if (empty($contest_node_wrapper->field_contest_entry_open) || empty($contest_node_wrapper->field_contest_voting_open)) {
    return FALSE;
  }
  
  // Contest no longer open
  $contest_entry_open = $contest_node_wrapper->field_contest_entry_open->value();
  $contest_voting_open = $contest_node_wrapper->field_contest_voting_open->value();
  if (empty($contest_entry_open) && empty($contest_voting_open)) {
    return FALSE;
  }  
  
  // Check entries current status (finalist or winner)
  $statuses = array(
    1 => 'finalist',
    2 => 'winner',
  );
  $contest_entry_node_wrapper = entity_metadata_wrapper('node', $contest_entry_node);
  if (empty($contest_entry_node_wrapper->field_contest_entry_status)) {
    return FALSE;
  }  
  
  $contest_entry_status = $contest_entry_node_wrapper->field_contest_entry_status->value();
  if (!empty($contest_entry_status)) {
    // Entry already finalist or winner, kill the 
    foreach ($contest_entry_status as $key) {
      unset($statuses[$key]);
    }
  }
  
  // Default, make links for both statuses
  if (!empty($statuses)) {
    foreach ($statuses as $key => $status) {
      $links['imagex_contest_contest_entry_admin_' . $status] = array(
        'title' => t('Select Entry As @status', array('@status' => drupal_ucfirst($status))),
        'href' => 'contest/select-entry/' . $contest_node->nid . '/' . $contest_entry_node->nid . '/' . $status,
        'query' => drupal_get_destination(),
        'attributes' => array(
          'title' => t('Select Entry As @status', array('@status' => drupal_ucfirst($status))),
          'class' => array('imagex-contest-contest-entry-admin imagex-contest-contest-entry-admin-' . $status),
        ),
      );
    }
  }
  
  return $links;
}

/**
 * Checks a user can admin a contest
 */
function imagex_contest_contest_admin_access($contest_node, $contest_entry_node, $status =  '') {
  global $user;
  if (is_array($contest_node)) {
    $contest_node = array_shift($contest_node);
  }
  if (($user->uid == $contest_node->uid && (user_access('create contest_entry content')  ||
        user_access('administer nodes'))) || user_access('administer nodes')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Invokes a rules set once user confirms
 *
 * @param $contest_node
 *  Related contest node object
 * @param $contest_entry_node
 *  Contest entry node to run workflow for
 * @param $statuses
 *  Array, determines the action to perform, select as finalist or winner
 */
function imagex_contest_contest_admin_form($form, &$form_state, $contest_node, $contest_entry_node, $status) {
  $rules_sets = array(
    'finalist' => 'rules_imagex_contest_entry_as_finalist',
    'winner' => 'rules_imagex_contest_entry_as_winner',
  );

  $form = array();
  $form['#rules_set'] = $rules_sets[$status];
  $form['#contest_node'] = $contest_node;
  $form['#contest_entry_node'] = $contest_entry_node;
  
  $form['entry_author_notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify contest entry author?'),
    '#default_value' => 1,
  );
  
  $form = confirm_form($form,
    t('Are you sure you want to select this entry as a %status?', array('%status' => $status)),
    $_GET['q']
  );  
  
  return $form;
}

/**
 * Submit callback for imagex_contest_contest_admin_form()
 */
function imagex_contest_contest_admin_form_submit($form, &$form_state) {
  $rules_set = $form['#rules_set'];
  $contest_node = $form['#contest_node'];
  $contest_entry_node = $form['#contest_entry_node'];
  $entry_author_notify = empty($form_state['values']['entry_author_notify']) ? 2 : 1;
  
  // Invoke rules
  $rule = rules_invoke_component($rules_set, $contest_entry_node, $entry_author_notify);
}
