<?php
/**
 * @file
 * Code for the Imagex Contest Voting feature.
 */

include_once 'imagex_contest_voting.features.inc';

/**
 * Implements hook_permission()
 */
function imagex_contest_voting_permission() {
  return array(
    'vote on contest entries' => array(
      'title' => t('Vote on contest entries'),
      'description' => t('Vote on contest entries.'),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function imagex_contest_voting_node_view($node, $view_mode, $langcode) {
  // Provide "Vote Now" Link on contests & contest entries
  if (($node->type == 'contest' || $node->type == 'contest_entry') && $vote_link = imagex_contest_voting_user_vote_access($node)) {        
    // Link to node/NID/cast-vote or login/reg message    
    $node->content['links']['imagex_contest_voting_add_vote'] = array(
      '#theme' => 'links__imagex_contest_voting_add_vote_' . $node->type,
      '#links' => $vote_link,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter()
 *
 * @see: views_bulk_operations.api.php
 */
function imagex_contest_voting_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  
  $view = $vbo->view;
  if ($view->name == 'imagex_contest_entry_voting') {
    // VBO initial form/view 
    if ($form_state['step'] == 'views_form_views_form') {
      // If $_GET['entry'] preselect in vote form
      if ($_GET['entry'] && !empty($form['views_bulk_operations'])) {
        foreach ($form['views_bulk_operations'] as $k => $entry) {
          if ($entry['#return_value'] == $_GET['entry']) {
            // Match = preselect
            $form['views_bulk_operations'][$k]['#default_value'] = TRUE;
          }
        }
      }
      dsm($form);
      // Clean nasty fieldset
      if (!empty($form['select'])) {
        $form['select']['#title'] = '';
        $form['select']['#collapsible'] = FALSE;
      }
    }
    
    // Just make confirm voting form a bit nicer
    if ($form_state['step'] == 'views_bulk_operations_confirm_form' && !empty($form['description'])) {
      $rows = $form_state['selection'];
      $entity_type = $vbo->get_entity_type();
      $entities = _views_bulk_operations_entity_load($entity_type, array_values($rows), $vbo->revision);
      $count = format_plural(count($entities), 'entry', '@count entries');
      foreach ($entities as $entity) {
        $items[] = check_plain(_views_bulk_operations_entity_label($entity_type, $entity));
      }
      $form['description']['#markup'] = theme('item_list', array('items' => $items, 'title' => t('Please confirm you want to vote on the following <strong>!count</strong>:', array('!count' => $count))));
    }
  }
}

/**
 * Determines if a user can vote on a contest/entry
 */
function imagex_contest_voting_user_vote_access($node) {
  global $user;
  
  // 1. User access
  if (!user_access('vote on contest entries')) {
    // Loggin no access
    $vote_link_title = t('You do not have sufficient permissions to vote on this contest.');
    $vote_link_class = array('imagex-contest-voting-no-access');
    
    // No access & not logged in
    if (empty($user->uid)) {
      $vote_link_title = t('<a href="@login">Log in</a> or <a href="@register">register</a> to vote on this contest.', array('@login' => url('user/login', array('query' => drupal_get_destination())), '@register' => url('user/register', array('query' => drupal_get_destination()))));
      $vote_link_class = array('imagex-contest-voting-anonymous');
    }
    
    // Give user feedback
    return array(
      'imagex_contest_voting_add_vote' => array(
        'title' => $vote_link_title,
        'hhtml' => TRUE,
        'attributes' => array(
          'title' => $vote_link_title,
          'class' => $vote_link_class,
        ),
      ),
    );    
  }
  
  // 2. Check related contest
  if ($node->type == 'contest') {
    $contest_node = $node;
    $vote_link_title = t('Cast your vote now!');
    $vote_link_contest_nid = $node->nid;
    $query = drupal_get_destination();
  }
  else {
    // Is a contest entry node so need to load contest data
    $contest_node = $node->field_contest_entry_contest[LANGUAGE_NONE][0]['entity'];
    $vote_link_title = t('Cast your vote for this entry now!');
    $vote_link_contest_nid = $contest_node->nid;
    $query = array('entry' => $node->nid, 'destination' => 'node/' . $contest_node->nid .'/cast-vote');
  }
  
  // If no node loaded (shouldn't happen) deny access
  if (empty($contest_node)) {
    return FALSE;
  }
  
  // Load meta data wrapper
  $contest_node_wrapper = entity_metadata_wrapper('node', $contest_node);
  $contest_voting_open = $contest_node_wrapper->field_contest_voting_open->value();
  
  // Contest open for voting?
  if (empty($contest_voting_open)) {
    return FALSE;
  }
  
  // Add vote link
  // Check if user has already voted on cast vote page
  // Assumes user can change vote while voting is open
  return array(
    'imagex_contest_voting_add_vote' => array(
      'title' => $vote_link_title,
      'href' => 'node/' . $vote_link_contest_nid . '/cast-vote',
      'query' => $query,
      'attributes' => array(
        'title' => $vote_link_title,
        'class' => array('imagex-contest-voting-add-vote'),
      ),
    ),
  ); 
}